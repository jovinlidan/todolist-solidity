{
  "language": "Solidity",
  "sources": {
    "contracts/TodoList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.2 <0.9.0;\n\nerror TodoList__NotFound();\n\ncontract TodoList {\n    struct Todo {\n        string message;\n        string date;\n        bool isCompleted;\n    }\n\n    event TodoStore(address owner);\n    event TodoRemove(address owner);\n    event TodoClear(address owner);\n\n\n    mapping (address =>  Todo[])  private  s_addressToTodos;\n\n\n    function storaTodo(string memory message, string memory date, bool isCompleted) public {\n        if(s_addressToTodos[msg.sender].length > 0 ) { //have todo\n        }\n        else { // doesn't have todo\n            // s_owners.push(msg.sender);\n        }\n        s_addressToTodos[msg.sender].push(Todo(message, date, isCompleted));\n        emit TodoStore(msg.sender);\n    }\n\n    function removeTodo(uint256 index) public {\n        Todo[] storage myTodos = s_addressToTodos[msg.sender];\n        if(index >= myTodos.length){\n            revert TodoList__NotFound();\n        }\n        myTodos[index] = myTodos[myTodos.length - 1];\n        myTodos.pop();\n\n        s_addressToTodos[msg.sender] = myTodos;\n        emit TodoRemove(msg.sender);\n    }\n\n    function clearTodo() public {\n        delete s_addressToTodos[msg.sender];\n\n\n        emit TodoClear(msg.sender);\n    }\n\n    function getTodos() public view returns(Todo[] memory) {\n        return s_addressToTodos[msg.sender];\n    }\n    function getTodo(uint256 index) public view returns(Todo memory) {\n        return s_addressToTodos[msg.sender][index];\n    }\n\n    // function getOwner(uint256 index) public view returns (address) {\n    //     return s_owners[index];\n    // }\n\n\n\n\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}