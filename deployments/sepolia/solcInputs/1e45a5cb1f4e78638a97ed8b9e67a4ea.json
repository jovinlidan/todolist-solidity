{
  "language": "Solidity",
  "sources": {
    "contracts/TodoList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.2 <0.9.0;\n\nerror TodoList__NotFound();\n\ncontract TodoList {\n    struct Todo {\n        uint256 id;\n        string message;\n        uint256 date;\n        bool isCompleted;\n    }\n\n    event TodoStore(address owner);\n    event TodoRemove(address owner);\n    event TodoUpdate(address owner);\n    event TodoClear(address owner);\n\n\n    mapping (address =>  Todo[])  private  s_addressToTodos;\n    uint256 private s_currentId = 1;\n    \n    function storeTodo(string memory message, uint256 date, bool isCompleted) public {\n        s_addressToTodos[msg.sender].push(Todo(s_currentId++, message, date, isCompleted));\n        emit TodoStore(msg.sender);\n    }\n\n    function markTodoDone(uint256 id) public {\n        Todo[] storage myTodos = s_addressToTodos[msg.sender];\n        uint256 todoIndex = getTodoIndex(id);\n        myTodos[todoIndex].isCompleted = true;\n        s_addressToTodos[msg.sender] = myTodos;\n        emit TodoUpdate(msg.sender);\n    }\n\n\n    function markTodoUndone(uint256 id) public {\n        Todo[] storage myTodos = s_addressToTodos[msg.sender];\n        uint256 todoIndex = getTodoIndex(id);\n        myTodos[todoIndex].isCompleted = false;\n        s_addressToTodos[msg.sender] = myTodos;\n        emit TodoUpdate(msg.sender);\n    }\n\n    function updateTodo(string memory message , uint256 date, bool isCompleted, uint256 id) public {\n        Todo[] storage myTodos = s_addressToTodos[msg.sender];\n        uint256 todoIndex = getTodoIndex(id);\n        myTodos[todoIndex] = Todo(myTodos[todoIndex].id, message, date, isCompleted); \n        s_addressToTodos[msg.sender] = myTodos;\n        emit TodoUpdate(msg.sender);\n    }\n\n    function removeTodo(uint256 id) public {\n        Todo[] storage myTodos = s_addressToTodos[msg.sender];\n        uint256 todoIndex = getTodoIndex(id);\n        if(todoIndex != myTodos.length - 1){ \n            myTodos[todoIndex] = myTodos[myTodos.length - 1];\n        }\n        myTodos.pop();\n        s_addressToTodos[msg.sender] = myTodos;\n        emit TodoRemove(msg.sender);\n    }\n\n    function clearTodo() public {\n        delete s_addressToTodos[msg.sender];\n        emit TodoClear(msg.sender);\n    }\n\n    function getTodos() public view returns(Todo[] memory) {\n        return s_addressToTodos[msg.sender];\n    }\n    function getTodoIndex(uint256 id) public view returns(uint256) {\n        Todo[] storage myTodos = s_addressToTodos[msg.sender];\n        for(uint256 i = 0; i < myTodos.length; i++){\n            if(myTodos[i].id == id){\n                return i;\n            }\n        }\n        revert TodoList__NotFound();\n    }\n    function getTodo(uint256 id) public view returns(Todo memory) {\n        Todo[] storage myTodos = s_addressToTodos[msg.sender];\n        for(uint256 i = 0; i < myTodos.length; i++){\n            if(myTodos[i].id == id){\n                return myTodos[i];\n            }\n        }\n        revert TodoList__NotFound();\n    }\n    function getCurrentId() public view returns(uint256){\n        return s_currentId;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}